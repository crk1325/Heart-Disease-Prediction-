{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing the libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline\n",
    "from sklearn import neighbors,datasets,preprocessing\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from matplotlib import pyplot\n",
    "from scipy import stats\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn import metrics\n",
    "from sklearn import model_selection\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import xgboost as xgb\n",
    "from sklearn.svm import SVC \n",
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>heart_disease_present</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0z64un</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ryoo3j</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>yt1s1x</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>l2xjde</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oyt4ek</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  patient_id  heart_disease_present\n",
       "0     0z64un                      0\n",
       "1     ryoo3j                      0\n",
       "2     yt1s1x                      1\n",
       "3     l2xjde                      1\n",
       "4     oyt4ek                      0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = pd.read_csv('labels.csv')\n",
    "labels.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>slope_of_peak_exercise_st_segment</th>\n",
       "      <th>thal</th>\n",
       "      <th>resting_blood_pressure</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>fasting_blood_sugar_gt_120_mg_per_dl</th>\n",
       "      <th>resting_ekg_results</th>\n",
       "      <th>serum_cholesterol_mg_per_dl</th>\n",
       "      <th>oldpeak_eq_st_depression</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_heart_rate_achieved</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0z64un</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ryoo3j</td>\n",
       "      <td>2</td>\n",
       "      <td>normal</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>yt1s1x</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>125</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>l2xjde</td>\n",
       "      <td>1</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>152</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oyt4ek</td>\n",
       "      <td>3</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>270</td>\n",
       "      <td>4.2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  patient_id  slope_of_peak_exercise_st_segment               thal  \\\n",
       "0     0z64un                                  1             normal   \n",
       "1     ryoo3j                                  2             normal   \n",
       "2     yt1s1x                                  1             normal   \n",
       "3     l2xjde                                  1  reversible_defect   \n",
       "4     oyt4ek                                  3  reversible_defect   \n",
       "\n",
       "   resting_blood_pressure  chest_pain_type  num_major_vessels  \\\n",
       "0                     128                2                  0   \n",
       "1                     110                3                  0   \n",
       "2                     125                4                  3   \n",
       "3                     152                4                  0   \n",
       "4                     178                1                  0   \n",
       "\n",
       "   fasting_blood_sugar_gt_120_mg_per_dl  resting_ekg_results  \\\n",
       "0                                     0                    2   \n",
       "1                                     0                    0   \n",
       "2                                     0                    2   \n",
       "3                                     0                    0   \n",
       "4                                     0                    2   \n",
       "\n",
       "   serum_cholesterol_mg_per_dl  oldpeak_eq_st_depression  sex  age  \\\n",
       "0                          308                       0.0    1   45   \n",
       "1                          214                       1.6    0   54   \n",
       "2                          304                       0.0    1   77   \n",
       "3                          223                       0.0    1   40   \n",
       "4                          270                       4.2    1   59   \n",
       "\n",
       "   max_heart_rate_achieved  exercise_induced_angina  \n",
       "0                      170                        0  \n",
       "1                      158                        0  \n",
       "2                      162                        1  \n",
       "3                      181                        0  \n",
       "4                      145                        0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = pd.read_csv('values.csv')\n",
    "values.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merging the data on unique identifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df = pd.merge(values , labels , on='patient_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>slope_of_peak_exercise_st_segment</th>\n",
       "      <th>thal</th>\n",
       "      <th>resting_blood_pressure</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>fasting_blood_sugar_gt_120_mg_per_dl</th>\n",
       "      <th>resting_ekg_results</th>\n",
       "      <th>serum_cholesterol_mg_per_dl</th>\n",
       "      <th>oldpeak_eq_st_depression</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_heart_rate_achieved</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>heart_disease_present</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0z64un</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ryoo3j</td>\n",
       "      <td>2</td>\n",
       "      <td>normal</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>yt1s1x</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>125</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>l2xjde</td>\n",
       "      <td>1</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>152</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oyt4ek</td>\n",
       "      <td>3</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>270</td>\n",
       "      <td>4.2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  patient_id  slope_of_peak_exercise_st_segment               thal  \\\n",
       "0     0z64un                                  1             normal   \n",
       "1     ryoo3j                                  2             normal   \n",
       "2     yt1s1x                                  1             normal   \n",
       "3     l2xjde                                  1  reversible_defect   \n",
       "4     oyt4ek                                  3  reversible_defect   \n",
       "\n",
       "   resting_blood_pressure  chest_pain_type  num_major_vessels  \\\n",
       "0                     128                2                  0   \n",
       "1                     110                3                  0   \n",
       "2                     125                4                  3   \n",
       "3                     152                4                  0   \n",
       "4                     178                1                  0   \n",
       "\n",
       "   fasting_blood_sugar_gt_120_mg_per_dl  resting_ekg_results  \\\n",
       "0                                     0                    2   \n",
       "1                                     0                    0   \n",
       "2                                     0                    2   \n",
       "3                                     0                    0   \n",
       "4                                     0                    2   \n",
       "\n",
       "   serum_cholesterol_mg_per_dl  oldpeak_eq_st_depression  sex  age  \\\n",
       "0                          308                       0.0    1   45   \n",
       "1                          214                       1.6    0   54   \n",
       "2                          304                       0.0    1   77   \n",
       "3                          223                       0.0    1   40   \n",
       "4                          270                       4.2    1   59   \n",
       "\n",
       "   max_heart_rate_achieved  exercise_induced_angina  heart_disease_present  \n",
       "0                      170                        0                      0  \n",
       "1                      158                        0                      0  \n",
       "2                      162                        1                      1  \n",
       "3                      181                        0                      1  \n",
       "4                      145                        0                      0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic checks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Shape of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(180, 15)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking the datatype of each Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 180 entries, 0 to 179\n",
      "Data columns (total 15 columns):\n",
      " #   Column                                Non-Null Count  Dtype  \n",
      "---  ------                                --------------  -----  \n",
      " 0   patient_id                            180 non-null    object \n",
      " 1   slope_of_peak_exercise_st_segment     180 non-null    int64  \n",
      " 2   thal                                  180 non-null    object \n",
      " 3   resting_blood_pressure                180 non-null    int64  \n",
      " 4   chest_pain_type                       180 non-null    int64  \n",
      " 5   num_major_vessels                     180 non-null    int64  \n",
      " 6   fasting_blood_sugar_gt_120_mg_per_dl  180 non-null    int64  \n",
      " 7   resting_ekg_results                   180 non-null    int64  \n",
      " 8   serum_cholesterol_mg_per_dl           180 non-null    int64  \n",
      " 9   oldpeak_eq_st_depression              180 non-null    float64\n",
      " 10  sex                                   180 non-null    int64  \n",
      " 11  age                                   180 non-null    int64  \n",
      " 12  max_heart_rate_achieved               180 non-null    int64  \n",
      " 13  exercise_induced_angina               180 non-null    int64  \n",
      " 14  heart_disease_present                 180 non-null    int64  \n",
      "dtypes: float64(1), int64(12), object(2)\n",
      "memory usage: 22.5+ KB\n"
     ]
    }
   ],
   "source": [
    "final_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Description of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>slope_of_peak_exercise_st_segment</th>\n",
       "      <th>resting_blood_pressure</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>fasting_blood_sugar_gt_120_mg_per_dl</th>\n",
       "      <th>resting_ekg_results</th>\n",
       "      <th>serum_cholesterol_mg_per_dl</th>\n",
       "      <th>oldpeak_eq_st_depression</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_heart_rate_achieved</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>heart_disease_present</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>180.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.550000</td>\n",
       "      <td>131.311111</td>\n",
       "      <td>3.155556</td>\n",
       "      <td>0.694444</td>\n",
       "      <td>0.161111</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>249.211111</td>\n",
       "      <td>1.010000</td>\n",
       "      <td>0.688889</td>\n",
       "      <td>54.811111</td>\n",
       "      <td>149.483333</td>\n",
       "      <td>0.316667</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.618838</td>\n",
       "      <td>17.010443</td>\n",
       "      <td>0.938454</td>\n",
       "      <td>0.969347</td>\n",
       "      <td>0.368659</td>\n",
       "      <td>0.998742</td>\n",
       "      <td>52.717969</td>\n",
       "      <td>1.121357</td>\n",
       "      <td>0.464239</td>\n",
       "      <td>9.334737</td>\n",
       "      <td>22.063513</td>\n",
       "      <td>0.466474</td>\n",
       "      <td>0.498290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>213.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>245.500000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>152.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>281.250000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>166.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       slope_of_peak_exercise_st_segment  resting_blood_pressure  \\\n",
       "count                         180.000000              180.000000   \n",
       "mean                            1.550000              131.311111   \n",
       "std                             0.618838               17.010443   \n",
       "min                             1.000000               94.000000   \n",
       "25%                             1.000000              120.000000   \n",
       "50%                             1.000000              130.000000   \n",
       "75%                             2.000000              140.000000   \n",
       "max                             3.000000              180.000000   \n",
       "\n",
       "       chest_pain_type  num_major_vessels  \\\n",
       "count       180.000000         180.000000   \n",
       "mean          3.155556           0.694444   \n",
       "std           0.938454           0.969347   \n",
       "min           1.000000           0.000000   \n",
       "25%           3.000000           0.000000   \n",
       "50%           3.000000           0.000000   \n",
       "75%           4.000000           1.000000   \n",
       "max           4.000000           3.000000   \n",
       "\n",
       "       fasting_blood_sugar_gt_120_mg_per_dl  resting_ekg_results  \\\n",
       "count                            180.000000           180.000000   \n",
       "mean                               0.161111             1.050000   \n",
       "std                                0.368659             0.998742   \n",
       "min                                0.000000             0.000000   \n",
       "25%                                0.000000             0.000000   \n",
       "50%                                0.000000             2.000000   \n",
       "75%                                0.000000             2.000000   \n",
       "max                                1.000000             2.000000   \n",
       "\n",
       "       serum_cholesterol_mg_per_dl  oldpeak_eq_st_depression         sex  \\\n",
       "count                   180.000000                180.000000  180.000000   \n",
       "mean                    249.211111                  1.010000    0.688889   \n",
       "std                      52.717969                  1.121357    0.464239   \n",
       "min                     126.000000                  0.000000    0.000000   \n",
       "25%                     213.750000                  0.000000    0.000000   \n",
       "50%                     245.500000                  0.800000    1.000000   \n",
       "75%                     281.250000                  1.600000    1.000000   \n",
       "max                     564.000000                  6.200000    1.000000   \n",
       "\n",
       "              age  max_heart_rate_achieved  exercise_induced_angina  \\\n",
       "count  180.000000               180.000000               180.000000   \n",
       "mean    54.811111               149.483333                 0.316667   \n",
       "std      9.334737                22.063513                 0.466474   \n",
       "min     29.000000                96.000000                 0.000000   \n",
       "25%     48.000000               132.000000                 0.000000   \n",
       "50%     55.000000               152.000000                 0.000000   \n",
       "75%     62.000000               166.250000                 1.000000   \n",
       "max     77.000000               202.000000                 1.000000   \n",
       "\n",
       "       heart_disease_present  \n",
       "count             180.000000  \n",
       "mean                0.444444  \n",
       "std                 0.498290  \n",
       "min                 0.000000  \n",
       "25%                 0.000000  \n",
       "50%                 0.000000  \n",
       "75%                 1.000000  \n",
       "max                 1.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking for null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "patient_id                              0\n",
       "slope_of_peak_exercise_st_segment       0\n",
       "thal                                    0\n",
       "resting_blood_pressure                  0\n",
       "chest_pain_type                         0\n",
       "num_major_vessels                       0\n",
       "fasting_blood_sugar_gt_120_mg_per_dl    0\n",
       "resting_ekg_results                     0\n",
       "serum_cholesterol_mg_per_dl             0\n",
       "oldpeak_eq_st_depression                0\n",
       "sex                                     0\n",
       "age                                     0\n",
       "max_heart_rate_achieved                 0\n",
       "exercise_induced_angina                 0\n",
       "heart_disease_present                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### No missing values found."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking for duplicate values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### No duplicate values were found"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Renaming and understanding the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df.rename(columns={'slope_of_peak_exercise_st_segment':'slope','thal':'thal','resting_blood_pressure':'rbp',\n",
    "                     'chest_pain_type' :'cp','num_major_vessels':'mjr_ves','fasting_blood_sugar_gt_120_mg_per_dl':'fbs',\n",
    "                     'resting_ekg_results':'restekg','serum_cholesterol_mg_per_dl':'chol','oldpeak_eq_st_depression':'oldpeak',\n",
    "                     'max_heart_rate_achieved':'max_hr','exercise_induced_angina':'ex_ang','heart_disease_present':'target'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>slope</th>\n",
       "      <th>thal</th>\n",
       "      <th>rbp</th>\n",
       "      <th>cp</th>\n",
       "      <th>mjr_ves</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restekg</th>\n",
       "      <th>chol</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_hr</th>\n",
       "      <th>ex_ang</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0z64un</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ryoo3j</td>\n",
       "      <td>2</td>\n",
       "      <td>normal</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>yt1s1x</td>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>125</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>l2xjde</td>\n",
       "      <td>1</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>152</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oyt4ek</td>\n",
       "      <td>3</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>270</td>\n",
       "      <td>4.2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  patient_id  slope               thal  rbp  cp  mjr_ves  fbs  restekg  chol  \\\n",
       "0     0z64un      1             normal  128   2        0    0        2   308   \n",
       "1     ryoo3j      2             normal  110   3        0    0        0   214   \n",
       "2     yt1s1x      1             normal  125   4        3    0        2   304   \n",
       "3     l2xjde      1  reversible_defect  152   4        0    0        0   223   \n",
       "4     oyt4ek      3  reversible_defect  178   1        0    0        2   270   \n",
       "\n",
       "   oldpeak  sex  age  max_hr  ex_ang  target  \n",
       "0      0.0    1   45     170       0       0  \n",
       "1      1.6    0   54     158       0       0  \n",
       "2      0.0    1   77     162       1       1  \n",
       "3      0.0    1   40     181       0       1  \n",
       "4      4.2    1   59     145       0       0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['patient_id', 'slope', 'thal', 'rbp', 'cp', 'mjr_ves', 'fbs', 'restekg',\n",
       "       'chol', 'oldpeak', 'sex', 'age', 'max_hr', 'ex_ang', 'target'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'target' variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    180.000000\n",
       "mean       0.444444\n",
       "std        0.498290\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        0.000000\n",
       "75%        1.000000\n",
       "max        1.000000\n",
       "Name: target, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[\"target\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1], dtype=int64)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[\"target\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hence,it's clear that this is a binary classification problem, with the target variable having values '0' and '1'¶"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis (EDA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### First analysing the target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAANyElEQVR4nO3dcayddX3H8fcHinaIjDa9dKVQy0zDxpzCvEHFxWx2RjanbXQYjMyGNesWndNlcanLMpYtLCRjy4jRJY0CZTOQDtlaSbZJOh1xG+gtYAQqKROtHbUtMAcyg1a/++M8/Xnpbtuz0nOeS8/7ldyc8zzPOfd+m7R95znPOb+bqkKSJIBT+h5AkjR/GAVJUmMUJEmNUZAkNUZBktQs6HuA52PJkiW1cuXKvseQpBeUHTt2PF5VU3Mde0FHYeXKlczMzPQ9hiS9oCT5+pGO+fKRJKkxCpKkxihIkhqjIElqjIIkqTEKkqRmZFFIckOS/UkemLVvcZI7k+zqbhfNOvbhJI8keTjJm0c1lyTpyEZ5pnATcNlh+zYC26tqFbC92ybJhcAVwE91z/lYklNHOJskaQ4ji0JV3QU8edjuNcDm7v5mYO2s/bdW1bNV9SjwCHDJqGaTJM1t3J9oXlpVewGqam+Ss7v9y4G7Zz1uT7fv/0iyAdgAsGLFiuc90Ks/dPPz/h46+ez4s/f0PYLUi/lyoTlz7JvzV8JV1aaqmq6q6ampOZfukCQdp3FHYV+SZQDd7f5u/x7gvFmPOxd4bMyzSdLEG3cUtgHruvvrgK2z9l+R5MVJzgdWAV8Y82ySNPFGdk0hyS3AzwFLkuwBrgauBbYkWQ/sBi4HqKoHk2wBHgIOAu+rqu+PajZJ0txGFoWqetcRDq0+wuOvAa4Z1TySpGObLxeaJUnzgFGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktQYBUlSYxQkSY1RkCQ1RkGS1BgFSVJjFCRJjVGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktQYBUlSYxQkSY1RkCQ1RkGS1BgFSVJjFCRJjVGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktQYBUlS00sUkvxOkgeTPJDkliQLkyxOcmeSXd3toj5mk6RJNvYoJFkO/DYwXVWvAE4FrgA2AturahWwvduWJI1RXy8fLQB+JMkC4HTgMWANsLk7vhlY289okjS5Foz7B1bVfya5DtgNfAf4TFV9JsnSqtrbPWZvkrPnen6SDcAGgBUrVoxrbGnsdv/xT/c9guahFX/45ZF+/z5ePlrE4KzgfOAc4CVJrhz2+VW1qaqmq2p6ampqVGNK0kTq4+WjXwAeraoDVfU94HbgUmBfkmUA3e3+HmaTpInWRxR2A69NcnqSAKuBncA2YF33mHXA1h5mk6SJ1sc1hXuS3AbcCxwE7gM2AWcAW5KsZxCOy8c9myRNurFHAaCqrgauPmz3swzOGiRJPfETzZKkxihIkhqjIElqjIIkqTEKkqTGKEiSGqMgSWqMgiSpMQqSpMYoSJIaoyBJaoyCJKkxCpKkxihIkhqjIElqjIIkqTEKkqTGKEiSGqMgSWqMgiSpMQqSpMYoSJIaoyBJaoyCJKkxCpKkxihIkhqjIElqjIIkqTEKkqTGKEiSGqMgSWqMgiSp6SUKSc5KcluSryTZmeR1SRYnuTPJru52UR+zSdIk6+tM4XrgH6vqJ4BXATuBjcD2qloFbO+2JUljNPYoJDkTeAPwCYCq+m5VfQtYA2zuHrYZWDvu2SRp0vVxpvDjwAHgxiT3Jfl4kpcAS6tqL0B3e3YPs0nSROsjCguAnwH+qqouBp7h//FSUZINSWaSzBw4cGBUM0rSROojCnuAPVV1T7d9G4NI7EuyDKC73T/Xk6tqU1VNV9X01NTUWAaWpEkx9ihU1TeBbyS5oNu1GngI2Aas6/atA7aOezZJmnQLevq57wc+meRFwFeBqxgEakuS9cBu4PKeZpOkiTVUFJJsr6rVx9o3rKq6H5ie49BxfT9J0olx1CgkWQicDizpPkyW7tCZwDkjnk2SNGbHOlP4DeCDDAKwgx9G4Sngo6MbS5LUh6NGoaquB65P8v6q+siYZpIk9WSoawpV9ZEklwIrZz+nqm4e0VySpB4Me6H5r4GXA/cD3+92F2AUJOkkMuxbUqeBC6uqRjmMJKlfw3547QHgx0Y5iCSpf8OeKSwBHkryBeDZQzur6m0jmUqS1Itho/BHoxxCkjQ/DPvuo38Z9SCSpP4N++6jpxm82wjgRcBpwDNVdeaoBpMkjd+wZwovnb2dZC1wySgGkiT157iWzq6qvwfeeGJHkST1bdiXj94+a/MUBp9b8DMLknSSGfbdR2+ddf8g8DVgzQmfRpLUq2GvKVw16kEkSf0b6ppCknOT/F2S/Un2JflUknNHPZwkabyGvdB8I4PfoXwOsBz4dLdPknQSGTYKU1V1Y1Ud7L5uAqZGOJckqQfDRuHxJFcmObX7uhJ4YpSDSZLGb9go/BrwTuCbwF7gVwAvPkvSSWbYt6T+CbCuqv4LIMli4DoGsZAknSSGPVN45aEgAFTVk8DFoxlJktSXYaNwSpJFhza6M4VhzzIkSS8Qw/7H/ufAvyW5jcHyFu8ErhnZVJKkXgz7ieabk8wwWAQvwNur6qGRTiZJGruhXwLqImAIJOkkdlxLZ0uSTk5GQZLUGAVJUmMUJEmNUZAkNUZBktT0FoVutdX7ktzRbS9OcmeSXd3tomN9D0nSidXnmcIHgJ2ztjcC26tqFbC925YkjVEvUeh+ledbgI/P2r0G2Nzd3wysHfNYkjTx+jpT+Evg94AfzNq3tKr2AnS3Z8/1xCQbkswkmTlw4MDIB5WkSTL2KCT5ZWB/Ve04nudX1aaqmq6q6akpfyOoJJ1IfSx//XrgbUl+CVgInJnkb4B9SZZV1d4ky4D9PcwmSRNt7GcKVfXhqjq3qlYCVwD/XFVXAtuAdd3D1gFbxz2bJE26+fQ5hWuBNyXZBbyp25YkjVGvvz2tqj4HfK67/wSwus95JGnSzaczBUlSz4yCJKkxCpKkxihIkhqjIElqjIIkqTEKkqTGKEiSGqMgSWqMgiSpMQqSpMYoSJIaoyBJaoyCJKkxCpKkxihIkhqjIElqjIIkqTEKkqTGKEiSGqMgSWqMgiSpMQqSpMYoSJIaoyBJaoyCJKkxCpKkxihIkhqjIElqjIIkqTEKkqTGKEiSmrFHIcl5ST6bZGeSB5N8oNu/OMmdSXZ1t4vGPZskTbo+zhQOAr9bVT8JvBZ4X5ILgY3A9qpaBWzvtiVJYzT2KFTV3qq6t7v/NLATWA6sATZ3D9sMrB33bJI06Xq9ppBkJXAxcA+wtKr2wiAcwNlHeM6GJDNJZg4cODC2WSVpEvQWhSRnAJ8CPlhVTw37vKraVFXTVTU9NTU1ugElaQL1EoUkpzEIwier6vZu974ky7rjy4D9fcwmSZOsj3cfBfgEsLOq/mLWoW3Auu7+OmDruGeTpEm3oIef+XrgV4EvJ7m/2/f7wLXAliTrgd3A5T3MJkkTbexRqKrPAznC4dXjnEWS9Fx+olmS1BgFSVJjFCRJjVGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktQYBUlSYxQkSY1RkCQ1RkGS1BgFSVJjFCRJjVGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktQYBUlSYxQkSY1RkCQ1RkGS1BgFSVJjFCRJjVGQJDVGQZLUGAVJUmMUJEmNUZAkNUZBktTMuygkuSzJw0keSbKx73kkaZLMqygkORX4KPCLwIXAu5Jc2O9UkjQ55lUUgEuAR6rqq1X1XeBWYE3PM0nSxFjQ9wCHWQ58Y9b2HuA1sx+QZAOwodv8dpKHxzTbJFgCPN73EPNBrlvX9wh6Lv9uHnJ1TsR3edmRDsy3KMz1p63nbFRtAjaNZ5zJkmSmqqb7nkM6nH83x2e+vXy0Bzhv1va5wGM9zSJJE2e+ReGLwKok5yd5EXAFsK3nmSRpYsyrl4+q6mCS3wL+CTgVuKGqHux5rEniy3Kar/y7OSapqmM/SpI0Eebby0eSpB4ZBUlSYxTk0iKat5LckGR/kgf6nmVSGIUJ59IimuduAi7re4hJYhTk0iKat6rqLuDJvueYJEZBcy0tsrynWST1zCjomEuLSJocRkEuLSKpMQpyaRFJjVGYcFV1EDi0tMhOYItLi2i+SHIL8O/ABUn2JFnf90wnO5e5kCQ1nilIkhqjIElqjIIkqTEKkqTGKEiSGqMgHUWSs5K8dww/Z60LEWo+MArS0Z0FDB2FDBzPv6u1DFaplXrl5xSko0hyaNXYh4HPAq8EFgGnAX9QVVuTrAT+oTv+Ogb/wb8HeDeDxQYfB3ZU1XVJXs5gqfIp4H+AXwcWA3cA/919vaOq/mNMf0TpORb0PYA0z20EXlFVFyVZAJxeVU8lWQLcneTQkiAXAFdV1XuTTAPvAC5m8G/sXmBH97hNwG9W1a4krwE+VlVv7L7PHVV12zj/cNLhjII0vAB/muQNwA8YLDG+tDv29aq6u7v/s8DWqvoOQJJPd7dnAJcCf5u0xWlfPKbZpaEYBWl472bwss+rq+p7Sb4GLOyOPTPrcXMtRw6Da3jfqqqLRjah9Dx5oVk6uqeBl3b3fxTY3wXh54GXHeE5nwfemmRhd3bwFoCqegp4NMnl0C5Kv2qOnyP1xihIR1FVTwD/2v3i+IuA6SQzDM4avnKE53yRwfLjXwJuB2YYXECme976JF8CHuSHv/r0VuBDSe7rLkZLvfDdR9IIJDmjqr6d5HTgLmBDVd3b91zSsXhNQRqNTd2H0RYCmw2CXig8U5AkNV5TkCQ1RkGS1BgFSVJjFCRJjVGQJDX/C4vuIEoPdR4dAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0    100\n",
       "1     80\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.target.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.target.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of patience with heart problems: 44.44444444444444\n",
      "Percentage of patience without heart problems: 55.55555555555556\n"
     ]
    }
   ],
   "source": [
    "k = final_df.target\n",
    "print(\"Percentage of patience with heart problems: \"+str(k.where(k==1).count()*100/180))\n",
    "print(\"Percentage of patience without heart problems: \"+str(k.where(k==0).count()*100/180))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Slope' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "1 = 'upsloping'\n",
    "2 = 'flat'\n",
    "3 = 'downsloping'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAANjElEQVR4nO3de6xl9VmH8ecLA6FASYfMAYeLTm0IFVspMMUKignQBFE7kwYqKDipGIyxCMZLqDHiJcaS0kZCauOkFAchrQgoWA2WjFClKvXMQOUyrTStIjJlDq2Ui0nbKa9/7EU8cwH2AL+9OPyeT3Ky91rr7H3eyQ7PXqyz9jqpKiRJ/dhr7AEkSbNl+CWpM4Zfkjpj+CWpM4ZfkjqzbOwBprFixYpatWrV2GNI0pKyadOmx6tqbuf1SyL8q1atYn5+fuwxJGlJSfKfu1vvoR5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6syS+OTunjjh168de4TXvE0f/NmxR5D0MrjHL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdaRr+JL+S5IEk9yf5RJL9khyc5PYkDw23y1vOIEnaUbPwJzkc+GVgdVW9BdgbOAe4FNhYVUcBG4dlSdKMtD7Uswx4XZJlwP7Ao8AaYMOwfQOwtvEMkqRFmoW/qv4buAJ4GNgKfKOqPg0cWlVbh+/ZChyyu8cnuTDJfJL5hYWFVmNKUndaHupZzmTv/o3AYcABSc6b9vFVtb6qVlfV6rm5uVZjSlJ3Wh7qOR34SlUtVNW3gZuBk4DHkqwEGG63NZxBkrSTluF/GHhHkv2TBDgN2ALcCqwbvmcdcEvDGSRJO1nW6omr6u4kNwKbge3APcB64EDghiQXMHlzOLvVDJKkXTULP0BVXQZcttPqbzLZ+5ckjcBP7kpSZwy/JHXG8EtSZwy/JHXG8EtSZ5qe1SPtqYd/761jj/Ca992/fd/YI2hk7vFLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmcMvyR1xvBLUmeahj/JG5LcmOQLSbYk+aEkBye5PclDw+3yljNIknbUeo//SuC2qnozcCywBbgU2FhVRwEbh2VJ0ow0C3+Sg4BTgKsBqupbVfUEsAbYMHzbBmBtqxkkSbtqucf/vcACcE2Se5J8LMkBwKFVtRVguD1kdw9OcmGS+STzCwsLDceUpL60DP8y4Hjgo1V1HPAMe3BYp6rWV9Xqqlo9NzfXakZJ6k7L8D8CPFJVdw/LNzJ5I3gsyUqA4XZbwxkkSTtpFv6q+irwX0mOHladBjwI3AqsG9atA25pNYMkaVfLGj//RcD1SfYFvgy8l8mbzQ1JLgAeBs5uPIMkaZGm4a+qe4HVu9l0WsufK0l6fn5yV5I6Y/glqTOGX5I6Y/glqTOGX5I6Y/glqTOGX5I6Y/glqTNThT/JxmnWSZJe/V7wk7tJ9gP2B1YMfykrw6aDgMMazyZJauDFLtnwC8AlTCK/if8P/5PAR9qNJUlq5QXDX1VXAlcmuaiqrprRTJKkhqa6SFtVXZXkJGDV4sdU1bWN5pIkNTJV+JP8GfAm4F7gO8PqAgy/JC0x016WeTVwTFVVy2EkSe1Nex7//cB3tRxEkjQb0+7xrwAeTPI54JvPrayqdzWZSpLUzLTh/52WQ0iSZmfas3o+03oQSdJsTHtWz1NMzuIB2BfYB3imqg5qNZgkqY1p9/hfv3g5yVrgxBYDSZLaeklX56yqvwJOfWVHkSTNwrSHet69aHEvJuf1e06/JC1B057V85OL7m8H/gNY84pPI0lqbtpj/O9tPYgkaTam/UMsRyT5yyTbkjyW5KYkR7QeTpL0ypv2l7vXALcyuS7/4cBfD+skSUvMtOGfq6prqmr78PWnwFzDuSRJjUwb/seTnJdk7+HrPOBrLQeTJLUxbfh/DngP8FVgK3AW4C98JWkJmvZ0zt8H1lXV/wAkORi4gskbgiRpCZl2j/8Hnos+QFV9HTiuzUiSpJamDf9eSZY/tzDs8U/7fwuSpFeRaeP9IeCfktzI5FIN7wH+oNlUkqRmpv3k7rVJ5plcmC3Au6vqwaaTSZKamPpwzRB6Yy9JS9xLuizznhjO+78nyaeG5YOT3J7koeF2+Ys9hyTpldM8/MDFwJZFy5cCG6vqKGDjsCxJmpGm4R8u5PbjwMcWrV4DbBjubwDWtpxBkrSj1nv8fwT8BvDsonWHVtVWgOH2kN09MMmFSeaTzC8sLDQeU5L60Sz8SX4C2FZVm17K46tqfVWtrqrVc3NeD06SXiktP4R1MvCuJGcC+wEHJbkOeCzJyqrammQlsK3hDJKknTTb46+q91fVEVW1CjgH+PuqOo/Jdf3XDd+2Dril1QySpF3N4qyenX0AeGeSh4B3DsuSpBmZyfV2qupO4M7h/teA02bxcyVJuxpjj1+SNCLDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1BnDL0mdMfyS1Jlm4U9yZJI7kmxJ8kCSi4f1Bye5PclDw+3yVjNIknbVco9/O/CrVfV9wDuAX0pyDHApsLGqjgI2DsuSpBlpFv6q2lpVm4f7TwFbgMOBNcCG4ds2AGtbzSBJ2tVMjvEnWQUcB9wNHFpVW2Hy5gAc8jyPuTDJfJL5hYWFWYwpSV1oHv4kBwI3AZdU1ZPTPq6q1lfV6qpaPTc3125ASepM0/An2YdJ9K+vqpuH1Y8lWTlsXwlsazmDJGlHLc/qCXA1sKWqPrxo063AuuH+OuCWVjNIkna1rOFznwycD9yX5N5h3W8CHwBuSHIB8DBwdsMZJEk7aRb+qroLyPNsPq3Vz5UkvTA/uStJnTH8ktQZwy9JnTH8ktQZwy9JnTH8ktQZwy9JnTH8ktQZwy9JnTH8ktQZwy9JnTH8ktSZllfnlNSRk686eewRuvDZiz77sp/DPX5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6ozhl6TOGH5J6swo4U9yRpIvJvlSkkvHmEGSejXz8CfZG/gI8GPAMcC5SY6Z9RyS1Ksx9vhPBL5UVV+uqm8BnwTWjDCHJHUpVTXbH5icBZxRVT8/LJ8P/GBVvW+n77sQuHBYPBr44kwHna0VwONjD6GXxNduaXutv37fU1VzO69cNsIg2c26Xd59qmo9sL79OONLMl9Vq8eeQ3vO125p6/X1G+NQzyPAkYuWjwAeHWEOSerSGOH/V+CoJG9Msi9wDnDrCHNIUpdmfqinqrYneR/wd8DewMer6oFZz/Eq08UhrdcoX7ulrcvXb+a/3JUkjctP7kpSZwy/JHXG8I8oyceTbEty/9izaM8kOTLJHUm2JHkgycVjz6TpJNkvyeeSfH547X537JlmzWP8I0pyCvA0cG1VvWXseTS9JCuBlVW1OcnrgU3A2qp6cOTR9CKSBDigqp5Osg9wF3BxVf3LyKPNjHv8I6qqfwC+PvYc2nNVtbWqNg/3nwK2AIePO5WmURNPD4v7DF9d7QEbfullSrIKOA64e+RRNKUkeye5F9gG3F5VXb12hl96GZIcCNwEXFJVT449j6ZTVd+pqrcxuXLAiUm6OtRq+KWXaDg+fBNwfVXdPPY82nNV9QRwJ3DGuJPMluGXXoLhF4RXA1uq6sNjz6PpJZlL8obh/uuA04EvjDrUjBn+ESX5BPDPwNFJHklywdgzaWonA+cDpya5d/g6c+yhNJWVwB1J/o3JtcNur6pPjTzTTHk6pyR1xj1+SeqM4Zekzhh+SeqM4Zekzhh+SeqM4ZdeRJI7k3T3B7n12mX4Jakzhl9aJMkBSf5muFb7/Ul+aqft5ya5b9h2+aL1Tyf5UJLNSTYmmRvWvynJbUk2JfnHJG+e9b9J2pnhl3Z0BvBoVR07/I2E257bkOQw4HLgVOBtwNuTrB02HwBsrqrjgc8Alw3r1wMXVdUJwK8BfzyLf4T0Qgy/tKP7gNOTXJ7kR6rqG4u2vR24s6oWqmo7cD1wyrDtWeDPh/vXAT88XLnzJOAvhksA/wmTywVIo1o29gDSq0lV/XuSE4AzgT9M8ulFm7MnT8Vkx+qJ4fK/0quGe/zSIsPhnP+tquuAK4DjF22+G/jRJCuS7A2cy+SwDkz+WzpruP/TwF3D9fm/kuTs4bmT5NhZ/DukF+Iev7SjtwIfTPIs8G3gF5m8AVBVW5O8H7iDyd7/31bVLcPjngG+P8km4BvAc78U/hngo0l+i8mf+Psk8PlZ/WOk3fHqnNIrIMnTVXXg2HNI0/BQjyR1xj1+SeqMe/yS1BnDL0mdMfyS1BnDL0mdMfyS1Jn/A4Bj/oA1XJBgAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "1    93\n",
       "2    75\n",
       "3    12\n",
       "Name: slope, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.slope.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.slope.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can observe that slope_of_peak_exercise_st_segment in upsloping is highest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Thal' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "1 = 'normal'\n",
    "2 = 'fixed defect'\n",
    "3 = 'reversable defect'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "normal               98\n",
       "reversible_defect    74\n",
       "fixed_defect          8\n",
       "Name: thal, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.thal.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.thal.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The observe that the blood flow with normal is higher comparing with reversible defect and fixed defect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'RBP' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(final_df.rbp.dropna(axis=0))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Chest Pain Type' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "1 = 'typical angina'\n",
    "2 = 'atypical angina'\n",
    "3 = 'non-anginal pain'\n",
    "4 = 'asymptomatic'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "4    82\n",
       "3    57\n",
       "2    28\n",
       "1    13\n",
       "Name: cp, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.cp.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.cp.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We notice, that chest pain of '1', i.e. the ones with typical angina are much less than the others."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'FBS' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "[0] = 'lower than 120mg/ml'\n",
    "[1] = 'greater than 120mg/ml'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0    151\n",
       "1     29\n",
       "Name: fbs, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.fbs.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.fbs.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### People with fasting blood sugar lower than 120mg/ml is much more compared to people with fbs greater than 120mg/ml."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Rest_Ekg' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "[0] = 'normal'\n",
    "[1] = 'ST-T wave abnormality'\n",
    "[2] = 'left ventricular hypertrophy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "2    94\n",
       "0    85\n",
       "1     1\n",
       "Name: restekg, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.restekg.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.restekg.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ST-T wave abnormality is negligible compared to other two types."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'chol' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "204    4\n",
       "239    4\n",
       "256    3\n",
       "234    3\n",
       "309    3\n",
       "      ..\n",
       "295    1\n",
       "175    1\n",
       "564    1\n",
       "172    1\n",
       "174    1\n",
       "Name: chol, Length: 118, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.distplot(final_df.chol.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.chol.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Major blood vessels' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0    106\n",
       "1     37\n",
       "2     23\n",
       "3     14\n",
       "Name: mjr_ves, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.mjr_ves.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.mjr_ves.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'oldpeak' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(final_df.oldpeak.dropna(axis=0))\n",
    "plt.show()\n",
    "#final_df.oldpeak.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'Sex' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "[0] = 'female'\n",
    "[1] = 'male'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "1    124\n",
       "0     56\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.sex.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.sex.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can clearly observe that females are more likely to have heart problems than males"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(final_df.age.dropna(axis=0))\n",
    "plt.show()\n",
    "#final_df.A.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'max heart rate' feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(final_df.max_hr.dropna(axis=0))\n",
    "plt.show()\n",
    "#final_df.max_hr.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing the 'ex_ang' feature"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "0 = 'no'\n",
    "1 = 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0    123\n",
       "1     57\n",
       "Name: ex_ang, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.countplot(final_df.ex_ang.dropna(axis=0))\n",
    "plt.show()\n",
    "final_df.ex_ang.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### People with exang=0 i.e. No Exercise induced angina are present more in our dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bivariate Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Let's consider only the below features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = final_df[['slope', 'thal', 'rbp', 'cp', 'mjr_ves', 'restekg',\n",
    "        'oldpeak', 'sex', 'age', 'ex_ang']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing using Violin plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 3600x2880 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(50,40), facecolor='white')\n",
    "plotnumber = 1\n",
    "\n",
    "for column in data:\n",
    "    if plotnumber<=14 :\n",
    "        ax = plt.subplot(6,2,plotnumber)\n",
    "        sns.violinplot(x=data[column].dropna(axis=0)\n",
    "                        ,y=final_df.target)\n",
    "        plt.xlabel(column,fontsize=50)\n",
    "        plt.ylabel('Disease',fontsize=50)\n",
    "    plotnumber+=1\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Analysing using the bar plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x2160 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(40,30), facecolor='white')\n",
    "plotnumber = 1\n",
    "\n",
    "for column in data:\n",
    "    if plotnumber<=14 :\n",
    "        ax = plt.subplot(6,2,plotnumber)\n",
    "        sns. barplot(x=data[column].dropna(axis=0)\n",
    "                        ,y=final_df.target)\n",
    "        plt.xlabel(column,fontsize=50)\n",
    "        plt.ylabel('Disease',fontsize=50)\n",
    "    plotnumber+=1\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multi-variate analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Analysing using pairplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 156 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#g=sns.pairplot(final_df, kind='reg', x_vars=columns,y_vars = ['Column 1'])\n",
    "\n",
    "\n",
    "sns.set_theme(style=\"ticks\")\n",
    "g=sns.pairplot(final_df,hue=\"target\")\n",
    "g.fig.set_size_inches(15,15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data PreProcessing "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dropping out the patient id column as it is further unnecessary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df = final_df.drop(['patient_id'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>slope</th>\n",
       "      <th>thal</th>\n",
       "      <th>rbp</th>\n",
       "      <th>cp</th>\n",
       "      <th>mjr_ves</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restekg</th>\n",
       "      <th>chol</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_hr</th>\n",
       "      <th>ex_ang</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>normal</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>normal</td>\n",
       "      <td>125</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>152</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>reversible_defect</td>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>270</td>\n",
       "      <td>4.2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   slope               thal  rbp  cp  mjr_ves  fbs  restekg  chol  oldpeak  \\\n",
       "0      1             normal  128   2        0    0        2   308      0.0   \n",
       "1      2             normal  110   3        0    0        0   214      1.6   \n",
       "2      1             normal  125   4        3    0        2   304      0.0   \n",
       "3      1  reversible_defect  152   4        0    0        0   223      0.0   \n",
       "4      3  reversible_defect  178   1        0    0        2   270      4.2   \n",
       "\n",
       "   sex  age  max_hr  ex_ang  target  \n",
       "0    1   45     170       0       0  \n",
       "1    0   54     158       0       0  \n",
       "2    1   77     162       1       1  \n",
       "3    1   40     181       0       1  \n",
       "4    1   59     145       0       0  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Converting categorical column 'thal' into numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Used the label encoding"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "\n",
    "final_df1['thal'] = le.fit_transform(final_df1['thal'])\n",
    "\n",
    "print(final_df1['thal'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Used one-hot label encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df = pd.get_dummies(final_df, drop_first='True' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>slope</th>\n",
       "      <th>rbp</th>\n",
       "      <th>cp</th>\n",
       "      <th>mjr_ves</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restekg</th>\n",
       "      <th>chol</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_hr</th>\n",
       "      <th>ex_ang</th>\n",
       "      <th>target</th>\n",
       "      <th>thal_normal</th>\n",
       "      <th>thal_reversible_defect</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>152</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>270</td>\n",
       "      <td>4.2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   slope  rbp  cp  mjr_ves  fbs  restekg  chol  oldpeak  sex  age  max_hr  \\\n",
       "0      1  128   2        0    0        2   308      0.0    1   45     170   \n",
       "1      2  110   3        0    0        0   214      1.6    0   54     158   \n",
       "2      1  125   4        3    0        2   304      0.0    1   77     162   \n",
       "3      1  152   4        0    0        0   223      0.0    1   40     181   \n",
       "4      3  178   1        0    0        2   270      4.2    1   59     145   \n",
       "\n",
       "   ex_ang  target  thal_normal  thal_reversible_defect  \n",
       "0       0       0            1                       0  \n",
       "1       0       0            1                       0  \n",
       "2       1       1            1                       0  \n",
       "3       0       1            0                       1  \n",
       "4       0       0            0                       1  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(180, 15)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We chose to consider the one-hot label encoding as:\n",
    "#### - The categorical feature is not ordinal .\n",
    "#### - The number of categorical features is less so one-hot encoding can be effectively applied."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Checking the Normality of the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>skew</th>\n",
       "      <th>kurtosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <td>0.666150</td>\n",
       "      <td>-0.505045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rbp</th>\n",
       "      <td>0.657080</td>\n",
       "      <td>0.473105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>-0.849258</td>\n",
       "      <td>-0.277853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mjr_ves</th>\n",
       "      <td>1.167999</td>\n",
       "      <td>0.138008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fbs</th>\n",
       "      <td>1.859153</td>\n",
       "      <td>1.472690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restekg</th>\n",
       "      <td>-0.100967</td>\n",
       "      <td>-2.006516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>1.273932</td>\n",
       "      <td>6.364425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>1.507412</td>\n",
       "      <td>3.242795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>-0.822900</td>\n",
       "      <td>-1.337826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>-0.199166</td>\n",
       "      <td>-0.567346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_hr</th>\n",
       "      <td>-0.393705</td>\n",
       "      <td>-0.482971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ex_ang</th>\n",
       "      <td>0.794871</td>\n",
       "      <td>-1.383679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <td>0.225490</td>\n",
       "      <td>-1.971182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_normal</th>\n",
       "      <td>-0.179988</td>\n",
       "      <td>-1.989839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_reversible_defect</th>\n",
       "      <td>0.364354</td>\n",
       "      <td>-1.888353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            skew  kurtosis\n",
       "slope                   0.666150 -0.505045\n",
       "rbp                     0.657080  0.473105\n",
       "cp                     -0.849258 -0.277853\n",
       "mjr_ves                 1.167999  0.138008\n",
       "fbs                     1.859153  1.472690\n",
       "restekg                -0.100967 -2.006516\n",
       "chol                    1.273932  6.364425\n",
       "oldpeak                 1.507412  3.242795\n",
       "sex                    -0.822900 -1.337826\n",
       "age                    -0.199166 -0.567346\n",
       "max_hr                 -0.393705 -0.482971\n",
       "ex_ang                  0.794871 -1.383679\n",
       "target                  0.225490 -1.971182\n",
       "thal_normal            -0.179988 -1.989839\n",
       "thal_reversible_defect  0.364354 -1.888353"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "\n",
    "final_df.agg(['skew', 'kurtosis']).transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### We can observe that some of the attributes are slighty skewed and some have  minor kurtosis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Outlier Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 16 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_df.plot(kind='box', subplots=True, layout=(2,8),\n",
    "sharex=False,sharey=False, figsize=(20, 10), \n",
    "color='blue');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Outlier Removal "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using IQR method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*********** InterQuartile Range ***********\n",
      "slope                      1.00\n",
      "rbp                       20.00\n",
      "cp                         1.00\n",
      "mjr_ves                    1.00\n",
      "fbs                        0.00\n",
      "restekg                    2.00\n",
      "chol                      67.50\n",
      "oldpeak                    1.60\n",
      "sex                        1.00\n",
      "age                       14.00\n",
      "max_hr                    34.25\n",
      "ex_ang                     1.00\n",
      "target                     1.00\n",
      "thal_normal                1.00\n",
      "thal_reversible_defect     1.00\n",
      "dtype: float64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(128, 15)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q1 = final_df.quantile(0.25)\n",
    "Q3 = final_df.quantile(0.75)\n",
    "IQR = Q3-Q1\n",
    "print('*********** InterQuartile Range ***********')\n",
    "print(IQR)\n",
    "# Remove the outliers using IQR\n",
    "final_dfout = final_df[~((final_df<(Q1-1.5*IQR))|(final_df>(Q3+1.5*IQR))).any(axis=1)]\n",
    "final_dfout.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using z_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(176, 15)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z_scores = stats.zscore(final_df)\n",
    "#calculate z-scores of `df`\n",
    "\n",
    "final_dfz = final_df[((np.abs(z_scores)) < 3).all(axis=1)]\n",
    "\n",
    "final_dfz.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We used both the outlier removal methods.\n",
    "#### Considered the z_score method as we got better results/accuracy with it "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Checking normality after outlier Removal "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>skew</th>\n",
       "      <th>kurtosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <td>0.655677</td>\n",
       "      <td>-0.509006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rbp</th>\n",
       "      <td>0.679972</td>\n",
       "      <td>0.540997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>-0.835001</td>\n",
       "      <td>-0.323370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mjr_ves</th>\n",
       "      <td>1.170594</td>\n",
       "      <td>0.154482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fbs</th>\n",
       "      <td>1.880172</td>\n",
       "      <td>1.552559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restekg</th>\n",
       "      <td>-0.080293</td>\n",
       "      <td>-2.010702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>0.001452</td>\n",
       "      <td>-0.395464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>0.973830</td>\n",
       "      <td>0.386403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>-0.874447</td>\n",
       "      <td>-1.249673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>-0.171024</td>\n",
       "      <td>-0.565119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_hr</th>\n",
       "      <td>-0.390593</td>\n",
       "      <td>-0.485141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ex_ang</th>\n",
       "      <td>0.787447</td>\n",
       "      <td>-1.395921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <td>0.230726</td>\n",
       "      <td>-1.969275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_normal</th>\n",
       "      <td>-0.207395</td>\n",
       "      <td>-1.979614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_reversible_defect</th>\n",
       "      <td>0.397174</td>\n",
       "      <td>-1.863561</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            skew  kurtosis\n",
       "slope                   0.655677 -0.509006\n",
       "rbp                     0.679972  0.540997\n",
       "cp                     -0.835001 -0.323370\n",
       "mjr_ves                 1.170594  0.154482\n",
       "fbs                     1.880172  1.552559\n",
       "restekg                -0.080293 -2.010702\n",
       "chol                    0.001452 -0.395464\n",
       "oldpeak                 0.973830  0.386403\n",
       "sex                    -0.874447 -1.249673\n",
       "age                    -0.171024 -0.565119\n",
       "max_hr                 -0.390593 -0.485141\n",
       "ex_ang                  0.787447 -1.395921\n",
       "target                  0.230726 -1.969275\n",
       "thal_normal            -0.207395 -1.979614\n",
       "thal_reversible_defect  0.397174 -1.863561"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_dfz.agg(['skew', 'kurtosis']).transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The skewness and kurtosis has reduced significantly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking correlation between columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using Heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = final_dfz.corr()\n",
    "fig = plt.subplots(figsize=(16,10))\n",
    "sns.heatmap(corr, annot=True,cmap='terrain')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using Pearson Correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>slope</th>\n",
       "      <th>rbp</th>\n",
       "      <th>cp</th>\n",
       "      <th>mjr_ves</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restekg</th>\n",
       "      <th>chol</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>max_hr</th>\n",
       "      <th>ex_ang</th>\n",
       "      <th>target</th>\n",
       "      <th>thal_normal</th>\n",
       "      <th>thal_reversible_defect</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.079435</td>\n",
       "      <td>0.101328</td>\n",
       "      <td>0.062745</td>\n",
       "      <td>0.078578</td>\n",
       "      <td>0.182440</td>\n",
       "      <td>-0.015378</td>\n",
       "      <td>0.582934</td>\n",
       "      <td>0.109170</td>\n",
       "      <td>0.166717</td>\n",
       "      <td>-0.411025</td>\n",
       "      <td>0.224721</td>\n",
       "      <td>0.329437</td>\n",
       "      <td>-0.280947</td>\n",
       "      <td>0.213137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rbp</th>\n",
       "      <td>0.079435</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.041534</td>\n",
       "      <td>0.017767</td>\n",
       "      <td>0.167762</td>\n",
       "      <td>0.077057</td>\n",
       "      <td>0.219034</td>\n",
       "      <td>0.190642</td>\n",
       "      <td>-0.048578</td>\n",
       "      <td>0.287088</td>\n",
       "      <td>-0.009184</td>\n",
       "      <td>0.126718</td>\n",
       "      <td>0.064062</td>\n",
       "      <td>-0.096241</td>\n",
       "      <td>0.041629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>0.101328</td>\n",
       "      <td>-0.041534</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.246130</td>\n",
       "      <td>-0.084707</td>\n",
       "      <td>0.036118</td>\n",
       "      <td>0.095000</td>\n",
       "      <td>0.041856</td>\n",
       "      <td>0.089800</td>\n",
       "      <td>0.084334</td>\n",
       "      <td>-0.295423</td>\n",
       "      <td>0.346133</td>\n",
       "      <td>0.406502</td>\n",
       "      <td>-0.295058</td>\n",
       "      <td>0.301381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mjr_ves</th>\n",
       "      <td>0.062745</td>\n",
       "      <td>0.017767</td>\n",
       "      <td>0.246130</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.174160</td>\n",
       "      <td>0.084377</td>\n",
       "      <td>0.162007</td>\n",
       "      <td>0.197121</td>\n",
       "      <td>0.096070</td>\n",
       "      <td>0.350518</td>\n",
       "      <td>-0.286821</td>\n",
       "      <td>0.171751</td>\n",
       "      <td>0.421975</td>\n",
       "      <td>-0.186898</td>\n",
       "      <td>0.195527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fbs</th>\n",
       "      <td>0.078578</td>\n",
       "      <td>0.167762</td>\n",
       "      <td>-0.084707</td>\n",
       "      <td>0.174160</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.045001</td>\n",
       "      <td>-0.004738</td>\n",
       "      <td>-0.016518</td>\n",
       "      <td>0.082346</td>\n",
       "      <td>0.171711</td>\n",
       "      <td>0.051813</td>\n",
       "      <td>0.003032</td>\n",
       "      <td>0.018478</td>\n",
       "      <td>-0.044719</td>\n",
       "      <td>-0.009356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restekg</th>\n",
       "      <td>0.182440</td>\n",
       "      <td>0.077057</td>\n",
       "      <td>0.036118</td>\n",
       "      <td>0.084377</td>\n",
       "      <td>0.045001</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.150437</td>\n",
       "      <td>0.107943</td>\n",
       "      <td>0.075926</td>\n",
       "      <td>0.112278</td>\n",
       "      <td>-0.118619</td>\n",
       "      <td>0.058434</td>\n",
       "      <td>0.159539</td>\n",
       "      <td>0.024559</td>\n",
       "      <td>-0.044449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>-0.015378</td>\n",
       "      <td>0.219034</td>\n",
       "      <td>0.095000</td>\n",
       "      <td>0.162007</td>\n",
       "      <td>-0.004738</td>\n",
       "      <td>0.150437</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.023378</td>\n",
       "      <td>-0.103832</td>\n",
       "      <td>0.212863</td>\n",
       "      <td>-0.119140</td>\n",
       "      <td>0.138511</td>\n",
       "      <td>0.165218</td>\n",
       "      <td>0.034238</td>\n",
       "      <td>0.005962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>0.582934</td>\n",
       "      <td>0.190642</td>\n",
       "      <td>0.041856</td>\n",
       "      <td>0.197121</td>\n",
       "      <td>-0.016518</td>\n",
       "      <td>0.107943</td>\n",
       "      <td>0.023378</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.145741</td>\n",
       "      <td>0.189231</td>\n",
       "      <td>-0.338615</td>\n",
       "      <td>0.267964</td>\n",
       "      <td>0.377599</td>\n",
       "      <td>-0.314863</td>\n",
       "      <td>0.287016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>0.109170</td>\n",
       "      <td>-0.048578</td>\n",
       "      <td>0.089800</td>\n",
       "      <td>0.096070</td>\n",
       "      <td>0.082346</td>\n",
       "      <td>0.075926</td>\n",
       "      <td>-0.103832</td>\n",
       "      <td>0.145741</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.126205</td>\n",
       "      <td>-0.043769</td>\n",
       "      <td>0.235695</td>\n",
       "      <td>0.336302</td>\n",
       "      <td>-0.442989</td>\n",
       "      <td>0.388306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.166717</td>\n",
       "      <td>0.287088</td>\n",
       "      <td>0.084334</td>\n",
       "      <td>0.350518</td>\n",
       "      <td>0.171711</td>\n",
       "      <td>0.112278</td>\n",
       "      <td>0.212863</td>\n",
       "      <td>0.189231</td>\n",
       "      <td>-0.126205</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.406935</td>\n",
       "      <td>0.095606</td>\n",
       "      <td>0.148393</td>\n",
       "      <td>-0.043240</td>\n",
       "      <td>0.011699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_hr</th>\n",
       "      <td>-0.411025</td>\n",
       "      <td>-0.009184</td>\n",
       "      <td>-0.295423</td>\n",
       "      <td>-0.286821</td>\n",
       "      <td>0.051813</td>\n",
       "      <td>-0.118619</td>\n",
       "      <td>-0.119140</td>\n",
       "      <td>-0.338615</td>\n",
       "      <td>-0.043769</td>\n",
       "      <td>-0.406935</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.355396</td>\n",
       "      <td>-0.366832</td>\n",
       "      <td>0.266132</td>\n",
       "      <td>-0.212531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ex_ang</th>\n",
       "      <td>0.224721</td>\n",
       "      <td>0.126718</td>\n",
       "      <td>0.346133</td>\n",
       "      <td>0.171751</td>\n",
       "      <td>0.003032</td>\n",
       "      <td>0.058434</td>\n",
       "      <td>0.138511</td>\n",
       "      <td>0.267964</td>\n",
       "      <td>0.235695</td>\n",
       "      <td>0.095606</td>\n",
       "      <td>-0.355396</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.446483</td>\n",
       "      <td>-0.389073</td>\n",
       "      <td>0.408027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <td>0.329437</td>\n",
       "      <td>0.064062</td>\n",
       "      <td>0.406502</td>\n",
       "      <td>0.421975</td>\n",
       "      <td>0.018478</td>\n",
       "      <td>0.159539</td>\n",
       "      <td>0.165218</td>\n",
       "      <td>0.377599</td>\n",
       "      <td>0.336302</td>\n",
       "      <td>0.148393</td>\n",
       "      <td>-0.366832</td>\n",
       "      <td>0.446483</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.528647</td>\n",
       "      <td>0.525374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_normal</th>\n",
       "      <td>-0.280947</td>\n",
       "      <td>-0.096241</td>\n",
       "      <td>-0.295058</td>\n",
       "      <td>-0.186898</td>\n",
       "      <td>-0.044719</td>\n",
       "      <td>0.024559</td>\n",
       "      <td>0.034238</td>\n",
       "      <td>-0.314863</td>\n",
       "      <td>-0.442989</td>\n",
       "      <td>-0.043240</td>\n",
       "      <td>0.266132</td>\n",
       "      <td>-0.389073</td>\n",
       "      <td>-0.528647</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.911186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal_reversible_defect</th>\n",
       "      <td>0.213137</td>\n",
       "      <td>0.041629</td>\n",
       "      <td>0.301381</td>\n",
       "      <td>0.195527</td>\n",
       "      <td>-0.009356</td>\n",
       "      <td>-0.044449</td>\n",
       "      <td>0.005962</td>\n",
       "      <td>0.287016</td>\n",
       "      <td>0.388306</td>\n",
       "      <td>0.011699</td>\n",
       "      <td>-0.212531</td>\n",
       "      <td>0.408027</td>\n",
       "      <td>0.525374</td>\n",
       "      <td>-0.911186</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           slope       rbp        cp   mjr_ves       fbs  \\\n",
       "slope                   1.000000  0.079435  0.101328  0.062745  0.078578   \n",
       "rbp                     0.079435  1.000000 -0.041534  0.017767  0.167762   \n",
       "cp                      0.101328 -0.041534  1.000000  0.246130 -0.084707   \n",
       "mjr_ves                 0.062745  0.017767  0.246130  1.000000  0.174160   \n",
       "fbs                     0.078578  0.167762 -0.084707  0.174160  1.000000   \n",
       "restekg                 0.182440  0.077057  0.036118  0.084377  0.045001   \n",
       "chol                   -0.015378  0.219034  0.095000  0.162007 -0.004738   \n",
       "oldpeak                 0.582934  0.190642  0.041856  0.197121 -0.016518   \n",
       "sex                     0.109170 -0.048578  0.089800  0.096070  0.082346   \n",
       "age                     0.166717  0.287088  0.084334  0.350518  0.171711   \n",
       "max_hr                 -0.411025 -0.009184 -0.295423 -0.286821  0.051813   \n",
       "ex_ang                  0.224721  0.126718  0.346133  0.171751  0.003032   \n",
       "target                  0.329437  0.064062  0.406502  0.421975  0.018478   \n",
       "thal_normal            -0.280947 -0.096241 -0.295058 -0.186898 -0.044719   \n",
       "thal_reversible_defect  0.213137  0.041629  0.301381  0.195527 -0.009356   \n",
       "\n",
       "                         restekg      chol   oldpeak       sex       age  \\\n",
       "slope                   0.182440 -0.015378  0.582934  0.109170  0.166717   \n",
       "rbp                     0.077057  0.219034  0.190642 -0.048578  0.287088   \n",
       "cp                      0.036118  0.095000  0.041856  0.089800  0.084334   \n",
       "mjr_ves                 0.084377  0.162007  0.197121  0.096070  0.350518   \n",
       "fbs                     0.045001 -0.004738 -0.016518  0.082346  0.171711   \n",
       "restekg                 1.000000  0.150437  0.107943  0.075926  0.112278   \n",
       "chol                    0.150437  1.000000  0.023378 -0.103832  0.212863   \n",
       "oldpeak                 0.107943  0.023378  1.000000  0.145741  0.189231   \n",
       "sex                     0.075926 -0.103832  0.145741  1.000000 -0.126205   \n",
       "age                     0.112278  0.212863  0.189231 -0.126205  1.000000   \n",
       "max_hr                 -0.118619 -0.119140 -0.338615 -0.043769 -0.406935   \n",
       "ex_ang                  0.058434  0.138511  0.267964  0.235695  0.095606   \n",
       "target                  0.159539  0.165218  0.377599  0.336302  0.148393   \n",
       "thal_normal             0.024559  0.034238 -0.314863 -0.442989 -0.043240   \n",
       "thal_reversible_defect -0.044449  0.005962  0.287016  0.388306  0.011699   \n",
       "\n",
       "                          max_hr    ex_ang    target  thal_normal  \\\n",
       "slope                  -0.411025  0.224721  0.329437    -0.280947   \n",
       "rbp                    -0.009184  0.126718  0.064062    -0.096241   \n",
       "cp                     -0.295423  0.346133  0.406502    -0.295058   \n",
       "mjr_ves                -0.286821  0.171751  0.421975    -0.186898   \n",
       "fbs                     0.051813  0.003032  0.018478    -0.044719   \n",
       "restekg                -0.118619  0.058434  0.159539     0.024559   \n",
       "chol                   -0.119140  0.138511  0.165218     0.034238   \n",
       "oldpeak                -0.338615  0.267964  0.377599    -0.314863   \n",
       "sex                    -0.043769  0.235695  0.336302    -0.442989   \n",
       "age                    -0.406935  0.095606  0.148393    -0.043240   \n",
       "max_hr                  1.000000 -0.355396 -0.366832     0.266132   \n",
       "ex_ang                 -0.355396  1.000000  0.446483    -0.389073   \n",
       "target                 -0.366832  0.446483  1.000000    -0.528647   \n",
       "thal_normal             0.266132 -0.389073 -0.528647     1.000000   \n",
       "thal_reversible_defect -0.212531  0.408027  0.525374    -0.911186   \n",
       "\n",
       "                        thal_reversible_defect  \n",
       "slope                                 0.213137  \n",
       "rbp                                   0.041629  \n",
       "cp                                    0.301381  \n",
       "mjr_ves                               0.195527  \n",
       "fbs                                  -0.009356  \n",
       "restekg                              -0.044449  \n",
       "chol                                  0.005962  \n",
       "oldpeak                               0.287016  \n",
       "sex                                   0.388306  \n",
       "age                                   0.011699  \n",
       "max_hr                               -0.212531  \n",
       "ex_ang                                0.408027  \n",
       "target                                0.525374  \n",
       "thal_normal                          -0.911186  \n",
       "thal_reversible_defect                1.000000  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pearsoncorr = final_dfz.corr(method='pearson')\n",
    "pearsoncorr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using the correlation fuction for just the target "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target                    1.000000\n",
       "thal_reversible_defect    0.525145\n",
       "ex_ang                    0.448647\n",
       "mjr_ves                   0.421519\n",
       "cp                        0.412829\n",
       "oldpeak                   0.382930\n",
       "slope                     0.344224\n",
       "sex                       0.335421\n",
       "restekg                   0.145933\n",
       "age                       0.138255\n",
       "chol                      0.079775\n",
       "rbp                       0.078506\n",
       "fbs                       0.003379\n",
       "max_hr                   -0.375352\n",
       "thal_normal              -0.528812\n",
       "Name: target, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.corr().target.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### From all the above methods we can observe that most columns are moderately correlated with target, but 'fbs','rbp and 'chol are very weakly correlated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Selected and finalised the following features for our model evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>mjr_ves</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>max_hr</th>\n",
       "      <th>slope</th>\n",
       "      <th>thal_normal</th>\n",
       "      <th>thal_reversible_defect</th>\n",
       "      <th>ex_ang</th>\n",
       "      <th>restekg</th>\n",
       "      <th>cp</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>170</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>158</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>181</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>2.6</td>\n",
       "      <td>157</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sex  age  mjr_ves  oldpeak  max_hr  slope  thal_normal  \\\n",
       "0    1   45        0      0.0     170      1            1   \n",
       "1    0   54        0      1.6     158      2            1   \n",
       "3    1   40        0      0.0     181      1            0   \n",
       "5    1   42        0      0.0     150      1            1   \n",
       "6    0   60        2      2.6     157      2            0   \n",
       "\n",
       "   thal_reversible_defect  ex_ang  restekg  cp  target  \n",
       "0                       0       0        2   2       0  \n",
       "1                       0       0        0   3       0  \n",
       "3                       1       0        0   4       1  \n",
       "5                       0       0        0   3       0  \n",
       "6                       1       0        2   4       1  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df2 = final_dfout.loc[:, ['sex','age','mjr_ves','oldpeak','max_hr','slope','thal_normal','thal_reversible_defect','ex_ang','restekg','cp','target']]\n",
    "final_df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(128, 12)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Separate Predictors and Target "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predictors\n",
    "X = final_df2.iloc[:,:-1]\n",
    "\n",
    "# target\n",
    "y = final_df2.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(128, 11)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(128,)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train Test Split "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.33,random_state=5)\n",
    "#without params X,y\n",
    "# RS-65,X,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(85, 11) (43, 11) (85,) (43,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_normalised = preprocessing.scale(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.preprocessing import MinMaxScaler\n",
    "#norm = MinMaxScaler().fit(X_train)\n",
    "#X_train_norm = norm.transform(X_train)\n",
    "#X_test_norm = norm.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc=StandardScaler()\n",
    "X_train_std=sc.fit_transform(X_train)\n",
    "X_test_std=sc.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Instead of using preprocessing.scale it is better to use Standardscaler() for standardization as:\n",
    "##### -preprocessing.scale has a risk of data leakage if applied before splitting.\n",
    "##### -preprocessing.scale cannot be applied on the testing data whereas Standardscaler can be whole data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### we have used standardscaler instead of MinMaxscaler because it gave better results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Algorithms Used"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lr = LogisticRegression()\n",
    "\n",
    "model_lr.fit(X_train_std,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8372093023255814"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_lr = model_lr.predict(X_test_std)\n",
    "\n",
    "accuracy_score(y_test, y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       21   5\n",
       "1        2  15"
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.81      0.86        26\n",
      "           1       0.75      0.88      0.81        17\n",
      "\n",
      "    accuracy                           0.84        43\n",
      "   macro avg       0.83      0.85      0.83        43\n",
      "weighted avg       0.85      0.84      0.84        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_lr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Logistic Regression is: 83.72 %\n"
     ]
    }
   ],
   "source": [
    "score_lr = round(accuracy_score(y_test,y_pred_lr,)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using Logistic Regression is: \"+str(score_lr)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.8823529411764706\n",
      "Test Accuracy: 0.8372093023255814\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_lr.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_lr.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "Logistic: ROC AUC=0.932\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ns_probs = [0 for _ in range(len(y_test))]\n",
    "# keep probabilities for the positive outcome only\n",
    "lr_probs = model_lr.predict_proba(X_test_std)[:,1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "lr_auc = roc_auc_score(y_test, lr_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('Logistic: ROC AUC=%.3f' % (lr_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "lr_fpr, lr_tpr, _ = roc_curve(y_test, lr_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(lr_fpr, lr_tpr, marker='.', label='Logistic')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KFold cross validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "kf = model_selection.KFold(n_splits=10, random_state=None)\n",
    "cvs_lr = cross_val_score(model_lr,X,y,cv=kf,scoring='accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8275641025641025"
      ]
     },
     "execution_count": 532,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_lr.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.07692307692307693\n",
      "Mean Squared Error: 0.07692307692307693\n",
      "Root Mean Squared Error: 0.2773500981126146\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_lr)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_lr)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_lr)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 592,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=10)"
      ]
     },
     "execution_count": 592,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_knn = KNeighborsClassifier(10)\n",
    "\n",
    "model_knn.fit(X_train_std,y_train)\n",
    "\n",
    "#24"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 593,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_knn = model_knn.predict(X_test_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 594,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8604651162790697"
      ]
     },
     "execution_count": 594,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, y_pred_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 595,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       22   4\n",
       "1        2  15"
      ]
     },
     "execution_count": 595,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pd.crosstab(y_test, y_pred_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 596,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.85      0.88        26\n",
      "           1       0.79      0.88      0.83        17\n",
      "\n",
      "    accuracy                           0.86        43\n",
      "   macro avg       0.85      0.86      0.86        43\n",
      "weighted avg       0.87      0.86      0.86        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_knn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using KNN is: 86.05 %\n"
     ]
    }
   ],
   "source": [
    "score_knn = round(accuracy_score(y_test,y_pred_knn)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using KNN is: \"+str(score_knn)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 598,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.8823529411764706\n",
      "Test Accuracy: 0.8604651162790697\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_knn.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_knn.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 599,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "KNN: ROC AUC=0.905\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ns_probs = [0 for _ in range(len(y_test))]\n",
    "knn_probs = model_knn.predict_proba(X_test_std)[:,1]\n",
    "# keep probabilities for the positive outcome only\n",
    " # calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "knn_auc = roc_auc_score(y_test, knn_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('KNN: ROC AUC=%.3f' % (knn_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "knn_fpr, knn_tpr, _ = roc_curve(y_test, knn_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(knn_fpr, knn_tpr, marker='.', label='KNN')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 600,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.13953488372093023\n",
      "Mean Squared Error: 0.13953488372093023\n",
      "Root Mean Squared Error: 0.3735436838188142\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_knn)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_knn)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_knn)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 933,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_features='log2', n_estimators=25)"
      ]
     },
     "execution_count": 933,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_rf = RandomForestClassifier(criterion= 'gini', max_features= 'log2', n_estimators= 25)\n",
    "\n",
    "model_rf.fit(X_train_std, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 934,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rf = model_rf.predict(X_test_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 935,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8837209302325582"
      ]
     },
     "execution_count": 935,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, y_pred_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 936,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       23   3\n",
       "1        2  15"
      ]
     },
     "execution_count": 936,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 937,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.88      0.90        26\n",
      "           1       0.83      0.88      0.86        17\n",
      "\n",
      "    accuracy                           0.88        43\n",
      "   macro avg       0.88      0.88      0.88        43\n",
      "weighted avg       0.89      0.88      0.88        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 938,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Random Forest is: 88.37 %\n"
     ]
    }
   ],
   "source": [
    "score_rf = round(accuracy_score(y_test,y_pred_rf)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using Random Forest is: \"+str(score_rf)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 939,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.9882352941176471\n",
      "Test Accuracy: 0.8837209302325582\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_rf.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_rf.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 940,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "RF: ROC AUC=0.941\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# keep probabilities for the positive outcome only\n",
    "rf_probs = model_rf.predict_proba(X_test_std)[:, 1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "rf_auc = roc_auc_score(y_test, rf_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('RF: ROC AUC=%.3f' % (rf_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "rf_fpr, rf_tpr, _ = roc_curve(y_test, rf_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(rf_fpr, rf_tpr, marker='.', label='RF')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 941,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.84615385, 0.92307692, 0.84615385, 0.92307692, 1.        ,\n",
       "       0.92307692, 0.84615385, 0.61538462, 0.75      , 0.83333333])"
      ]
     },
     "execution_count": 941,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_rf = cross_val_score(model_rf,X,y,cv=kf,scoring='accuracy')\n",
    "cvs_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 942,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8506410256410257"
      ]
     },
     "execution_count": 942,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_rf.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 943,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.11627906976744186\n",
      "Mean Squared Error: 0.11627906976744186\n",
      "Root Mean Squared Error: 0.34099716973523675\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_rf)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_rf)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_rf)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 653,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1200 candidates, totalling 6000 fits\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=21; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=41; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=49; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=54; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=54; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=54; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=55; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=55; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=61; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=61; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=61; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=75; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=80; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=80; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=80; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=82; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=89; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=90; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=91; total time=   0.3s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=91; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=92; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=94; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=97; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=101; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=101; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=102; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=auto, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=103; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=103; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=105; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=105; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=107; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=107; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=107; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=107; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=108; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=111; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=111; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=111; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=112; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=114; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=115; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=116; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=118; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=118; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=120; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=122; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=123; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=128; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=129; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=130; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=130; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=135; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=138; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=141; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=142; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=143; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=auto, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=145; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=147; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=154; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=156; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=159; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=161; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=161; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=163; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=163; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=163; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=163; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=164; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=166; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=166; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=167; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=170; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=173; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=174; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=174; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=175; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=175; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=176; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=176; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=176; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=176; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=178; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=178; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=179; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=181; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=181; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=181; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=181; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=182; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=182; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=182; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=183; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=183; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=183; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=184; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=184; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=184; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=auto, n_estimators=184; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=184; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=185; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=185; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=185; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=186; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=186; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=187; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=187; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=187; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=188; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=188; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=188; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=189; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=189; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=189; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=190; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=193; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=195; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=195; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=197; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=198; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=199; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=auto, n_estimators=200; total time=   0.4s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=6; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=26; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=47; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=49; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=50; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=50; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=50; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=50; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=52; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=52; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=56; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=56; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=56; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=64; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=64; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=64; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=64; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=64; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=67; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=68; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=72; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=72; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=73; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=74; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=82; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=88; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=88; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=92; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=92; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=92; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=93; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=95; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=96; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=96; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=96; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=96; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=96; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=99; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=sqrt, n_estimators=99; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=104; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=107; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=107; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=107; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=109; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=109; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=111; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=112; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=115; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=119; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=122; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=122; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=124; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=125; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=126; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=128; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=129; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=129; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=130; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=132; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=134; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=136; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=137; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=143; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=144; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=145; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=150; total time=   0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=151; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=153; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=156; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=159; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=161; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=163; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=163; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=163; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=165; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=166; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=166; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=166; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=166; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=167; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=168; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=169; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=170; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=171; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=172; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=174; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=174; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=174; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=174; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=176; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=179; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=179; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=180; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=180; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=180; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=181; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=183; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=183; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=185; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=187; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=188; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=190; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=190; total time=   0.6s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=191; total time=   0.7s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=191; total time=   0.6s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=191; total time=   0.6s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=191; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=191; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=192; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=192; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=192; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=192; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=194; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=195; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=196; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=197; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=197; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=199; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=199; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=199; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=200; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=200; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=200; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=200; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=sqrt, n_estimators=200; total time=   0.4s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END ..criterion=gini, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=13; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=33; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=48; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=50; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=51; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=54; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=56; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=58; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=62; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=62; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=62; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=62; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=64; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=65; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=67; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=68; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=70; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=73; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=74; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=74; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=74; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=74; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=74; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=75; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=75; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=75; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=77; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=80; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=80; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=84; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=84; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=87; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=89; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=89; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=90; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=90; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=90; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=90; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=92; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=92; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=94; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=95; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .criterion=gini, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=96; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=98; total time=   0.0s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=98; total time=   0.1s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=98; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END .criterion=gini, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=100; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=100; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=104; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=105; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=109; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=111; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=111; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=111; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=114; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=114; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=115; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=116; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=log2, n_estimators=116; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=118; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=119; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=119; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=119; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=119; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=123; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=123; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=126; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=126; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=128; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=136; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=136; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=log2, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=138; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=139; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=143; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=144; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=151; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=156; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=157; total time=   0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=158; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=163; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=164; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=165; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=165; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=165; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=165; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=166; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=167; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=167; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=167; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=168; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=168; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=168; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=169; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=169; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=170; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=170; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=170; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=170; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=171; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=171; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=171; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=174; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=174; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=177; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=log2, n_estimators=177; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=177; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=178; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=179; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=180; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=181; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=182; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=182; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=182; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=183; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=183; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=183; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=183; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=183; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=184; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=184; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=184; total time=   0.6s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=185; total time=   0.6s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=185; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=185; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=185; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=185; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=186; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=188; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=188; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=189; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=189; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=191; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=192; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=193; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=195; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=195; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=195; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=195; total time=   0.1s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=197; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=197; total time=   0.5s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=gini, max_features=log2, n_estimators=198; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=198; total time=   0.3s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=199; total time=   0.5s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=gini, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=18; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=38; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=51; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=52; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=52; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=53; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=53; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=53; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=54; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=54; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=58; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=58; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=76; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=77; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=77; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=77; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=77; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=77; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=78; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=84; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=85; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=87; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=88; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=88; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=88; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=91; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=91; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=91; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=92; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=93; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=96; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=96; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=98; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=101; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=103; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=103; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=103; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=104; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=108; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=110; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=111; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=112; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=113; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=116; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=116; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=116; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=118; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=118; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=118; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=119; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=119; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=119; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=119; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=120; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=120; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=122; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=122; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=130; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=132; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=134; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=137; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=137; total time=   0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=139; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=141; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=143; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=147; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=147; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=148; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=151; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=152; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=157; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=157; total time=   0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=158; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=159; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=163; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=164; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=165; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=167; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=172; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=174; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=176; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=176; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=177; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=177; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=177; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=177; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=178; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=178; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=180; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=181; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=182; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=183; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=185; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=187; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=187; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=188; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=191; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=191; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=192; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=192; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=192; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=193; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=193; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=194; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=194; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=195; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=195; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=195; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=195; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=195; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=196; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=196; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=auto, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=197; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=198; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=199; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=199; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=199; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=200; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=200; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=auto, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=17; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=37; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=51; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=52; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=52; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=56; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=56; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=57; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=60; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=61; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=63; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=64; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=67; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=68; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=70; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=72; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=73; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=75; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=76; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=77; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=78; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=79; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=79; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=79; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=79; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=79; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=80; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=80; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=80; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=80; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=81; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=83; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=85; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=87; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=90; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=90; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=92; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=93; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=95; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=95; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=96; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=97; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=97; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=98; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=98; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=98; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=98; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=99; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=101; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=104; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=104; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=108; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=109; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=110; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=112; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=112; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=113; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=114; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=114; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=114; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=115; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=116; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=116; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=118; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=120; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=122; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=122; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=122; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=122; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=123; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=123; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=124; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=126; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=127; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=128; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=129; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=131; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=132; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=133; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=135; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=135; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=136; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=136; total time=   0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=138; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=140; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=140; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=145; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=146; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=148; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=148; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=151; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=152; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=154; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=155; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=156; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=157; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=158; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=158; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=158; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=159; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=159; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=160; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=161; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=161; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=162; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=162; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=162; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=163; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=165; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=166; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=166; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=168; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=168; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=169; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=170; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=171; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=173; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=175; total time=   0.4s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=176; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=176; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=177; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=178; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=178; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=178; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=178; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=179; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=179; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=180; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=182; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=183; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=183; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=183; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=184; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=185; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=187; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=188; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=189; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=189; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=189; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=189; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=190; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=191; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=191; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=191; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=191; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=191; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=192; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=192; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=194; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=195; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=195; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=196; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=196; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=196; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=196; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=197; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=197; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=198; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=199; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=200; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=200; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=200; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=1; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=2; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=3; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=4; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=5; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=6; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=7; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=8; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=9; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=10; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=11; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=12; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=13; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=14; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=15; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=15; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=16; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=17; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=18; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=19; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=20; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=21; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=22; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=23; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=24; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=25; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=26; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=27; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=28; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=29; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=30; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=31; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=32; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=33; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=34; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=35; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=35; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=36; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=37; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=38; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=39; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=40; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=41; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=42; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=43; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=44; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=45; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=46; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=47; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=48; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=49; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=50; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=50; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=51; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=52; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=53; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=54; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=54; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=55; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=55; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=55; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=56; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=57; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=58; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=59; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=59; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=60; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=61; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=62; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=63; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=64; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=65; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=66; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=66; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=67; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=68; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=69; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=69; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=70; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=71; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=71; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=72; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=73; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=74; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=74; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=74; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=75; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=76; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=77; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=77; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=78; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=79; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=80; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=80; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=81; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=82; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=82; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=83; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=84; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=84; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=85; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=86; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=86; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=87; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=88; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=88; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=89; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=89; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=90; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=90; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=90; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=91; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=91; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=91; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=92; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=93; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=94; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=94; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=95; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=96; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=96; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=97; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=98; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=98; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=98; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=98; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=99; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=101; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=102; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=102; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=102; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=103; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=103; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=104; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=105; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=106; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=106; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=106; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=107; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=108; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=108; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=108; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=109; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=110; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=110; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=111; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=112; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=112; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=112; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=113; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=114; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=114; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=114; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=115; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=115; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=115; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=115; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=116; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=116; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=117; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=117; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=117; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=118; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=119; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=119; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=119; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=119; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=120; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=120; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=121; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=121; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=121; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=122; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=122; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=122; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=122; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=123; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=123; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=123; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=124; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=124; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=124; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=125; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=125; total time=   0.0s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=125; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=126; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=127; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=127; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=128; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=128; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=128; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=128; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=129; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=130; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=130; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=130; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=131; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=132; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=132; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=132; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=133; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=133; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=134; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=134; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=135; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=136; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=136; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=137; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=137; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=137; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=137; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=138; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=139; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=139; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=140; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=140; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=141; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=141; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=141; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=142; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=142; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=143; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=143; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=143; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=144; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=145; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=145; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=145; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=145; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=145; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=146; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=146; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=146; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=147; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=148; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=149; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=149; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=149; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=150; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=150; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=151; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=151; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=151; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=151; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=152; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=152; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=153; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=153; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=153; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=153; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=153; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=154; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=154; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=154; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=155; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=156; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=156; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=157; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=157; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=157; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=158; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=159; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=159; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=159; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=159; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=160; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=161; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=161; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=161; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=162; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=162; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=162; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=162; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=163; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=164; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=164; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=164; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=164; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=165; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=166; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=166; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=167; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=167; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=167; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=167; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=168; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=169; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=169; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=170; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=171; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=171; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=172; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=172; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=172; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=172; total time=   0.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=173; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=173; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=173; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=174; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=174; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=174; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=175; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=175; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=176; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=177; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=177; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=178; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=178; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=179; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=179; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=179; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=179; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=180; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=180; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=180; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=181; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=181; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=181; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=182; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=182; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=182; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=182; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=183; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=183; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=184; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=184; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=184; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=184; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=185; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=185; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=185; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=186; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=186; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=186; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=186; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=187; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=187; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=187; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=187; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=188; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=188; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=188; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=188; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=188; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=189; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=189; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=189; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=190; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=190; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=191; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=191; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=192; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=192; total time=   0.4s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END criterion=entropy, max_features=log2, n_estimators=192; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=192; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=193; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=193; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=194; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=194; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=195; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=195; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=196; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=196; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=196; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=196; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=197; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=197; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=197; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=198; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=198; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=199; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=199; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=199; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=200; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=200; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=200; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=200; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=200; total time=   0.7s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=RandomForestClassifier(max_features='log2',\n",
       "                                              n_estimators=25),\n",
       "             param_grid={'criterion': ['gini', 'entropy'],\n",
       "                         'max_features': ['auto', 'sqrt', 'log2'],\n",
       "                         'n_estimators': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n",
       "                                          13, 14, 15, 16, 17, 18, 19, 20, 21,\n",
       "                                          22, 23, 24, 25, 26, 27, 28, 29, 30, ...]},\n",
       "             verbose=2)"
      ]
     },
     "execution_count": 653,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "parameters = {\n",
    "    'criterion' : ['gini', 'entropy'],\n",
    "    'max_features' : ['auto', 'sqrt', 'log2'],\n",
    "    'n_estimators': [int(x) for x in np.linspace(start = 1, stop = 200, num = 200)]\n",
    "}\n",
    "\n",
    "\n",
    "clf = GridSearchCV(model_rf,param_grid=parameters , verbose=2)\n",
    "clf.fit(X_train_std,y_train)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'gini', 'max_features': 'auto', 'n_estimators': 121}"
      ]
     },
     "execution_count": 654,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8941176470588236"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=121)"
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_estimator_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 446,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_dt = DecisionTreeClassifier(splitter='best')\n",
    "\n",
    "model_dt.fit(X_train_std, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8372093023255814"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_dt = model_dt.predict(X_test_std)\n",
    "accuracy_score(y_test, y_pred_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       22   4\n",
       "1        3  14"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.86        26\n",
      "           1       0.78      0.82      0.80        17\n",
      "\n",
      "    accuracy                           0.84        43\n",
      "   macro avg       0.83      0.83      0.83        43\n",
      "weighted avg       0.84      0.84      0.84        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 610,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Decision Tree is: 83.72 %\n"
     ]
    }
   ],
   "source": [
    "score_dt = round(accuracy_score(y_test,y_pred_dt)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 611,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.8372093023255814\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_dt.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_dt.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 945,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "DT: ROC AUC=0.835\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# keep probabilities for the positive outcome only\n",
    "dt_probs = model_dt.predict_proba(X_test_std)[:, 1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "dt_auc = roc_auc_score(y_test, dt_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('DT: ROC AUC=%.3f' % (dt_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "dt_fpr, dt_tpr, _ = roc_curve(y_test, dt_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(dt_fpr, dt_tpr, marker='.', label='DT')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 948,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.16279069767441862\n",
      "Mean Squared Error: 0.16279069767441862\n",
      "Root Mean Squared Error: 0.4034732923929645\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_dt)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_dt)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_dt)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XG Boost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 616,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, eval_metric='mlogloss',\n",
       "              gamma=0, gpu_id=-1, importance_type='gain',\n",
       "              interaction_constraints='', learning_rate=0.300000012,\n",
       "              max_delta_step=0, max_depth=6, min_child_weight=1, missing=nan,\n",
       "              monotone_constraints='()', n_estimators=100, n_jobs=8,\n",
       "              num_parallel_tree=1, random_state=0, reg_alpha=0, reg_lambda=1,\n",
       "              scale_pos_weight=1, subsample=1, tree_method='exact',\n",
       "              validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 616,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_xgb  = xgb.XGBClassifier(eval_metric=\"mlogloss\")\n",
    "\n",
    "model_xgb.fit(X_train_std, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 617,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_xgb = model_xgb.predict(X_test_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 618,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.813953488372093"
      ]
     },
     "execution_count": 618,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, y_pred_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 619,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       20   6\n",
       "1        2  15"
      ]
     },
     "execution_count": 619,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.77      0.83        26\n",
      "           1       0.71      0.88      0.79        17\n",
      "\n",
      "    accuracy                           0.81        43\n",
      "   macro avg       0.81      0.83      0.81        43\n",
      "weighted avg       0.83      0.81      0.82        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_xgb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 621,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Xgb is: 81.4 %\n"
     ]
    }
   ],
   "source": [
    "score_xgb = round(accuracy_score(y_test,y_pred_xgb)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using Xgb is: \"+str(score_xgb)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 622,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.813953488372093\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_xgb.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_xgb.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "XGB: ROC AUC=0.916\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# keep probabilities for the positive outcome only\n",
    "xgb_probs = model_xgb.predict_proba(X_test_std)[:, 1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "xgb_auc = roc_auc_score(y_test, xgb_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('XGB: ROC AUC=%.3f' % (xgb_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "xgb_fpr, xgb_tpr, _ = roc_curve(y_test, xgb_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(xgb_fpr, xgb_tpr, marker='.', label='XGB')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 624,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.92307692, 0.84615385, 0.84615385, 0.92307692, 0.92307692,\n",
       "       0.92307692, 0.84615385, 0.69230769, 0.83333333, 0.75      ])"
      ]
     },
     "execution_count": 624,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_xgb = cross_val_score(model_xgb,X,y,cv=kf,scoring='accuracy')\n",
    "cvs_xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8506410256410255"
      ]
     },
     "execution_count": 625,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_xgb.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 950,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.18604651162790697\n",
      "Mean Squared Error: 0.18604651162790697\n",
      "Root Mean Squared Error: 0.43133109281375365\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_xgb)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_xgb)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_xgb)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(gamma=0.05, probability=True)"
      ]
     },
     "execution_count": 518,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_svm = SVC(C= 1.0, gamma= 0.05, kernel= 'rbf',probability=True)\n",
    "\n",
    "model_svm.fit(X_train_std,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8604651162790697"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_svm = model_svm.predict(X_test_std)\n",
    "accuracy_score(y_test, y_pred_svm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       22   4\n",
       "1        2  15"
      ]
     },
     "execution_count": 520,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_svm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.85      0.88        26\n",
      "           1       0.79      0.88      0.83        17\n",
      "\n",
      "    accuracy                           0.86        43\n",
      "   macro avg       0.85      0.86      0.86        43\n",
      "weighted avg       0.87      0.86      0.86        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_svm))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using SVM is: 86.05 %\n"
     ]
    }
   ],
   "source": [
    "score_svm = round(accuracy_score(y_test,y_pred_svm)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using SVM is: \"+str(score_svm)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.8941176470588236\n",
      "Test Accuracy: 0.8604651162790697\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_svm.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_svm.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "svm: ROC AUC=0.907\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# keep probabilities for the positive outcome only\n",
    "svm_probs = model_svm.predict_proba(X_test_std)[:, 1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "svm_auc = roc_auc_score(y_test, svm_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('svm: ROC AUC=%.3f' % (svm_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "svm_fpr, svm_tpr, _ = roc_curve(y_test, svm_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(svm_fpr, svm_tpr, marker='.', label='SVM')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyper parameter tuning for SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 240 candidates, totalling 1200 fits\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=1.0, kernel=poly; total time=   0.4s\n",
      "[CV] END ......................C=0.1, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.1, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.1, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.1, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.1, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.1, kernel=rbf; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .......................C=0.5, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=0.5, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=0.5, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=0.5, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=0.5, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=0.5, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=0.5, kernel=linear; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .......................C=1.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=1.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=1.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=1.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=1.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=1.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=2.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=2.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=2.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=2.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=2.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.01, kernel=rbf; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ......................C=5.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=5.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .......................C=5.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=5.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=5.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=5.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.1, kernel=linear; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ...................C=10.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=10.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=10.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=10.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=10.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=10.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.05, kernel=linear; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ..................C=25.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=25.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=25.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=25.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=25.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=25.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.05, kernel=rbf; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .....................C=50.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=50.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=50.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=50.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=50.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=50.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.05, kernel=linear; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ..................C=75.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ...................C=75.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ......................C=75.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=75.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=75.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=75.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.01, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.01, kernel=rbf; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.01, kernel=poly; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.05, kernel=linear; total time=   0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END .................C=100.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.05, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.05, kernel=rbf; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.05, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.1, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.1, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.1, kernel=poly; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=0.25, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.25, kernel=rbf; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=0.25, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=0.5, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=0.5, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=0.5, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=1.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=1.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=1.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ..................C=100.0, gamma=5.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END .....................C=100.0, gamma=5.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=5.0, kernel=poly; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END .................C=100.0, gamma=10.0, kernel=linear; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ....................C=100.0, gamma=10.0, kernel=rbf; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=10.0, kernel=poly; total time=   0.0s\n",
      "[CV] END ...................C=100.0, gamma=10.0, kernel=poly; total time=   0.0s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=SVC(),\n",
       "             param_grid={'C': [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 25.0, 50.0, 75.0,\n",
       "                               100.0],\n",
       "                         'gamma': [0.01, 0.05, 0.1, 0.25, 0.5, 1.0, 5.0, 10.0],\n",
       "                         'kernel': ['linear', 'rbf', 'poly']},\n",
       "             verbose=2)"
      ]
     },
     "execution_count": 515,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "parameters = {\n",
    "    'kernel': ['linear', 'rbf', 'poly'],\n",
    "    'C': [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 25.0, 50.0,75.0, 100.0],\n",
    "    'gamma': [0.01, 0.05, 0.1, 0.25, 0.5, 1.0, 5.0,10.0]\n",
    "}\n",
    "\n",
    "\n",
    "clf = GridSearchCV(SVC(),param_grid=parameters , verbose=2)\n",
    "clf.fit(X_train_std,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1.0, 'gamma': 0.05, 'kernel': 'rbf'}"
      ]
     },
     "execution_count": 516,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 635,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.69230769, 0.76923077, 0.61538462, 0.69230769, 0.69230769,\n",
       "       0.69230769, 0.61538462, 0.69230769, 0.75      , 0.5       ])"
      ]
     },
     "execution_count": 635,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_svm = cross_val_score(model_svm,X,y,cv=skf,scoring='accuracy')\n",
    "cvs_svm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 636,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6711538461538462"
      ]
     },
     "execution_count": 636,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_svm.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8588235294117647"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 951,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.13953488372093023\n",
      "Mean Squared Error: 0.13953488372093023\n",
      "Root Mean Squared Error: 0.3735436838188142\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_svm)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_svm)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_svm)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model_nb = GaussianNB()\n",
    "\n",
    "model_nb.fit(X_train_std,y_train)\n",
    "y_pred_nb = model_nb.predict(X_test_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Naive Bayes is: 86.05 %\n"
     ]
    }
   ],
   "source": [
    "score_nb = round(accuracy_score(y_test,y_pred_nb)*100,2)\n",
    "\n",
    "print(\"The accuracy score achieved using Naive Bayes is: \"+str(score_nb)+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    0   1\n",
       "target        \n",
       "0       22   4\n",
       "1        2  15"
      ]
     },
     "execution_count": 526,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, y_pred_nb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.85      0.88        26\n",
      "           1       0.79      0.88      0.83        17\n",
      "\n",
      "    accuracy                           0.86        43\n",
      "   macro avg       0.85      0.86      0.86        43\n",
      "weighted avg       0.87      0.86      0.86        43\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_nb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.8705882352941177\n",
      "Test Accuracy: 0.8604651162790697\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy:\",model_nb.score(X_train_std, y_train))\n",
    "print(\"Test Accuracy:\",model_nb.score(X_test_std, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 637,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No Skill: ROC AUC=0.500\n",
      "NB: ROC AUC=0.934\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# keep probabilities for the positive outcome only\n",
    "nb_probs = model_nb.predict_proba(X_test_std)[:, 1]\n",
    "# calculate scores\n",
    "ns_auc = roc_auc_score(y_test, ns_probs)\n",
    "nb_auc = roc_auc_score(y_test, nb_probs)\n",
    "# summarize scores\n",
    "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
    "print('NB: ROC AUC=%.3f' % (nb_auc))\n",
    "# calculate roc curves\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\n",
    "nb_fpr, nb_tpr, _ = roc_curve(y_test, nb_probs)\n",
    "# plot the roc curve for the model\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\n",
    "plt.plot(nb_fpr, nb_tpr, marker='.', label='NB')\n",
    "# axis labels\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "# show the legend\n",
    "plt.legend()\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 638,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.92307692, 0.92307692, 0.84615385, 0.92307692, 1.        ,\n",
       "       0.84615385, 0.76923077, 0.61538462, 0.91666667, 0.83333333])"
      ]
     },
     "execution_count": 638,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_nb = cross_val_score(model_nb,X,y,cv=10,scoring='accuracy')\n",
    "cvs_nb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 639,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8596153846153847"
      ]
     },
     "execution_count": 639,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cvs_nb.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 952,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.13953488372093023\n",
      "Mean Squared Error: 0.13953488372093023\n",
      "Root Mean Squared Error: 0.3735436838188142\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_nb)) \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_nb)) \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_nb)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Results Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 944,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score achieved using Logistic Regression is: 83.72 %\n",
      "The accuracy score achieved using Support Vector Machine is: 86.05 %\n",
      "The accuracy score achieved using K-Nearest Neighbors is: 86.05 %\n",
      "The accuracy score achieved using Decision Tree is: 83.72 %\n",
      "The accuracy score achieved using Random Forest is: 88.37 %\n",
      "The accuracy score achieved using XGBoost is: 81.4 %\n",
      "The accuracy score achieved using Naive Bayes is: 86.05 %\n"
     ]
    }
   ],
   "source": [
    "scores = [score_lr,score_svm,score_knn,score_dt,score_rf,score_xgb,score_nb]\n",
    "algorithms = [\"Logistic Regression\",\"Support Vector Machine\",\"K-Nearest Neighbors\",\"Decision Tree\",\"Random Forest\",\"XGBoost\",\"Naive Bayes\"]    \n",
    "\n",
    "for i in range(len(algorithms)):\n",
    "    print(\"The accuracy score achieved using \"+algorithms[i]+\" is: \"+str(scores[i])+\" %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Algorithms', ylabel='Accuracy score'>"
      ]
     },
     "execution_count": 641,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,8)})\n",
    "plt.xlabel(\"Algorithms\")\n",
    "plt.ylabel(\"Accuracy score\")\n",
    "\n",
    "sns.barplot(algorithms,scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Out of all the other algorithms we tried, Random Forest gives the best combination of metric scores i.e. recall,f1 & accuracy score"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "The result we got are as follows:\n",
    "The accuracy score achieved using Logistic Regression is: 83.72 %\n",
    "The accuracy score achieved using Support Vector Machine is: 86.05 %\n",
    "The accuracy score achieved using K-Nearest Neighbors is: 86.05 %\n",
    "The accuracy score achieved using Decision Tree is: 83.72 %\n",
    "The accuracy score achieved using Random Forest is: 88.37 %\n",
    "The accuracy score achieved using XGBoost is: 81.4 %\n",
    "The accuracy score achieved using Naive Bayes is: 86.05 %"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
